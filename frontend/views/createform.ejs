<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-SgOJa3DmI69IUzQ2PVdRZhwQ+dy64/BUtbMJw1MZ8t5HZApcHrRKUc4W0kG879m7"
      crossorigin="anonymous"
    />
    <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css"
    rel="stylesheet"
    integrity="sha384-SgOJa3DmI69IUzQ2PVdRZhwQ+dy64/BUtbMJw1MZ8t5HZApcHrRKUc4W0kG879m7"
    crossorigin="anonymous"
  />
  <style>
 

    body {
      background: linear-gradient(
                rgba(0, 0, 0, 0.6),
                rgba(0, 0, 0, 0.6)
              ),
              url('/static/images/image copy 3.png') no-repeat center center fixed;
      background-size: cover;
      font-family: 'Poppins', sans-serif;
    }
    
     .form-container {
      background: rgba(255, 255, 255, 0.85);
      padding: 30px;
      margin: 40px auto;
      max-width: 900px;
      border-radius: 15px;
      box-shadow: 0 8px 16px rgba(0,0,0,0.25);
    }
    .button-wrapper {
    display: flex;
    justify-content: center; 
    align-items: center; 
    gap: 20px;
    margin-top: 20px;
}
.button-container {
  display: flex;
  justify-content: center; 
  align-items: center;
  gap: 10px; 
  margin-top: 20px; 
}

button {
  margin: 10px;
}

  </style>
    <script>
      async function createUpdate(event) {
    const getEle = document.getElementsByTagName("form")[0];
    const numbvalue = document.getElementsByName("numberInput")[0];
    const title = document.getElementsByName("topicTitle")[0].value;
    console.log(window.location.href.split("/"));
    let editId;
    try {
        editId = parseInt(window.location.href.split("/")[4][0]);
    }
    catch (error) {
        console.log(error);
    }
    console.log(editId);

    let data;
    let fieldsArray;
    try {
        if (editId) {
            console.log(editId);
         
            const token = localStorage.getItem("token"); 
            const response = await fetch(
                "http://localhost:5000/admin/form/" + editId, {
                    method: "GET",
                    headers: {
                        "Authorization": `Bearer ${token}` 
                    }
                });
            const formData = await response.json();
            data = formData["data"];
            numbvalue.value = data["noOfFields"];
            console.log(data["noOfFields"]);
            fieldsArray = data["formFields"].filter(data => Object.keys(data)[0] !== "fieldSet");
            console.log(fieldsArray);
            numbvalue.value = fieldsArray.length;
            console.log(fieldsArray[0]["radio"]);
        }
    } catch (error) {
        console.log(error);
    }

        for (let i = 0; i < numbvalue.value; i++) {
          let combine = [];
          let comb;
          let validations = [];

          if(data){
            console.log(i)
          if (fieldsArray[i][Object.keys(fieldsArray[i])[0]]["options"]!==undefined) {
            combine = fieldsArray[i][Object.keys(fieldsArray[i])[0]][
              "options"
            ].unshift(
              fieldsArray[i][Object.keys(fieldsArray[i])[0]]["mainLabel"]
            );
            comb =
              fieldsArray[i][Object.keys(fieldsArray[i])[0]]["options"].slice(
                0
              );
          } else {
            comb = fieldsArray[i][Object.keys(fieldsArray[i])[0]]["mainLabel"];
          }
      
          validationArray =
            fieldsArray[i][Object.keys(fieldsArray[i])[0]]["inputvalidation"];
            if(validationArray==undefined || (validationArray.length==1 && validationArray[0]["prop"]==="")){
              validationArray=null
            }
          if (validationArray!==null) {
            validationArray.forEach((a) => {
              console.log(a);
              validations.push(`${a["prop"]}:${a["val"]}`);
            });
          }
          const valobj = validations.join(",");
 
        }
          getEle.innerHTML += `<div class="formgroup d-flex">
                     <div class="maincont mb-3">
                <label for="exampleInputEmail1" class="form-label">${"Input Type"
                }</label>
                <input type="email" value="${
                  data ? Object.keys(fieldsArray[i])[0] : "Input Type"
                }" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
                </div>
                 <div class="maincont mb-3">
                <label for="exampleInputEmail1" class="form-label">${ "Label Name"
                }</label>
                <input type="email" value="${
                  data ? comb : "Label Name"
                }" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
                </div>
                 <div class="maincont mb-3">
                <label for="exampleInputEmail1" class="form-label">Validations</label>
                <input type="email" value="${
                  validations.length > 0 ? validations : ""
                }" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
                </div>
                 <div class="maincont mb-3">
                <label for="exampleInputEmail1" class="form-label">Short Hand Validations</label>
                <input type="email" value=${
                  data
                    ? JSON.stringify(
                        fieldsArray[i][Object.keys(fieldsArray[i])[0]][
                          "shortHand"
                        ].join(",")
                      )
                    : "short Hand Validations"
                } class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
                </div>
                </div>`;
        }

        if (data) {
  const newButton = document.createElement("button");
  newButton.setAttribute("type", "button");
  newButton.textContent = "Add Fields";
  newButton.classList.add("btn");
  newButton.classList.add("btn-primary");
  const newButtonUpdate = document.createElement("button");
  newButtonUpdate.textContent = "Update";
  newButtonUpdate.classList.add("btn-success");
  newButtonUpdate.classList.add("btn");
  const newButtonField = document.createElement("button");
  newButtonField.setAttribute("type", "button");
  newButtonField.textContent = "Add To FieldSet";
  newButtonField.classList.add("btn");
  newButtonField.classList.add("btn-warning");
  newButton.addEventListener("click", addFields);
  newButtonUpdate.addEventListener("click", generateForm);
  newButtonField.addEventListener("click", addFieldSet);

  const buttonContainer = document.createElement("div");
  buttonContainer.classList.add("button-container");

  buttonContainer.appendChild(newButton);
  buttonContainer.appendChild(newButtonUpdate);
  buttonContainer.appendChild(newButtonField);

  const bdy = document.getElementsByTagName("body")[0];
  bdy.appendChild(buttonContainer);
}
 else {
  const bdy = document.getElementsByTagName("body")[0];
  

  const buttonWrapper = document.createElement('div');
  buttonWrapper.className = "button-wrapper"; 
  
  buttonWrapper.innerHTML += `<button type="button" class="generate create btn btn-primary">${
    data ? "Add Fields" : "Generate Form"
  }</button>`;
  buttonWrapper.innerHTML += `<button type="button" class="addFields create btn btn-success">Add Fields</button>`;
  buttonWrapper.innerHTML += `<button type="button" class="groupInto create btn btn-warning">Group Into FieldSet</button>`;

  bdy.appendChild(buttonWrapper);

  document
    .getElementsByClassName("generate")[0]
    .addEventListener("click", generateForm);
  document
    .getElementsByClassName("addFields")[0]
    .addEventListener("click", addFields);
  document
    .getElementsByClassName("groupInto")[0]
    .addEventListener("click", addFieldSet);
}


     

      
        document.getElementsByName("topicTitle")[0].value = data
          ? data["title"]
          : title;
        document.getElementsByName("numberInput")[0].value = numbvalue.value;
      }
      function addFieldSet(event) {
        event.preventDefault();

       

        const form = document.getElementsByTagName("form")[0];

    
        const fieldsetDiv = document.createElement("div");
        fieldsetDiv.classList.add("setsgroup", "d-flex");

       
        const fieldsetLabel = document.createElement("label");
        fieldsetLabel.setAttribute("for", "fieldsetName");
        fieldsetLabel.classList.add("form-label");
        fieldsetLabel.innerText = "FieldSet Name";
        const fieldsetInput = document.createElement("input");
        fieldsetInput.setAttribute("type", "text");
        fieldsetInput.classList.add("fieldsetcls", "form-control");
        fieldsetInput.id = "fieldsetName";

      
        const childElementsLabel = document.createElement("label");
        childElementsLabel.setAttribute("for", "childElements");
        childElementsLabel.classList.add("form-label");
        childElementsLabel.innerText = "Child Elements";
        const childElementsInput = document.createElement("input");
        childElementsInput.setAttribute("type", "text");
        childElementsInput.classList.add("fieldsetcls", "form-control");
        childElementsInput.id = "childElements";

       
        fieldsetDiv.appendChild(fieldsetLabel);
        fieldsetDiv.appendChild(fieldsetInput);
        fieldsetDiv.appendChild(childElementsLabel);
        fieldsetDiv.appendChild(childElementsInput);

       
        form.appendChild(fieldsetDiv);

      
      }
      function addFields() {
  const form = document.getElementsByTagName("form")[0];

  const fieldGroup = document.createElement("div");
  fieldGroup.className = "formgroup d-flex";

  
  function createInput(labelText, placeholder = "") {
    const container = document.createElement("div");
    container.className = "maincont mb-3";

    const label = document.createElement("label");
    label.className = "form-label";
    label.innerText = labelText;

    const input = document.createElement("input");
    input.className = "form-control";
    input.setAttribute("type", "email"); 
    input.setAttribute("aria-describedby", "emailHelp");
    input.setAttribute("placeholder", placeholder);

    container.appendChild(label);
    container.appendChild(input);
    return container;
  }


  fieldGroup.appendChild(createInput("Label"));
  fieldGroup.appendChild(createInput("Input Type"));
  fieldGroup.appendChild(createInput("Validations"));
  fieldGroup.appendChild(createInput("Short Hand Validations"));

  form.appendChild(fieldGroup);
}

      async function sendData(arr) {
        const token = localStorage.getItem("token");
 
 
        try {
          if (window.location.href!="http://localhost:4000/forms") {
            const formId= window.location.href.split("/")[4][0];
            await fetch("http://localhost:5000/admin/form/" +parseInt(formId) ,{
              method: "PUT",
              headers: { "Content-Type": "application/json" ,Authorization: `Bearer ${token}`},
              body: JSON.stringify(arr),
            });
            window.location.href=window.origin+"/admin";
          } else {
            console.log("Hello")
            await fetch("http://localhost:5000/admin/form", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    "Authorization": `Bearer ${localStorage.getItem("token")}`  // Assuming the token is stored in localStorage
  },
  body: JSON.stringify(arr),
  
});
window.location.href=window.origin+"/admin";

          }
        } catch (error) {
          console.log("Error While Creating Form",error);
        }
      }

      function generateForm() {
        const getDiv = document.getElementsByClassName("formgroup");
        const getDivNodes = Array.from(getDiv);
        console.log(getDivNodes)
        const fieldSets=Array.from(document.getElementsByClassName("setsgroup"));
        const formobj = {};
        const arr = [];
        const fieldSetArray=[];
        
        fieldSets.forEach(element=>{
            const fields=Array.from(element.getElementsByTagName("input"));
            console.log(fields)
            console.log(fields[0].value);
            console.log(fields[1].value);
            fieldSetArray.push({fieldSetLabel:fields[0].value,elements:fields[1].value.split(",")})
            const obj={fieldSet:fieldSetArray};
            arr.push(obj);
        })

        getDivNodes.forEach((ele) => {
          const obj = {};
          const children = ele.getElementsByTagName("input");
          const inputType = children[0].value;
          let labels = children[1].value;
          let labelsArray = [];
          console.log(labels);
          let validationFields = children[2].value;
          let shorthandFields = children[3].value;
          let validationArray = [];
          if (validationFields.includes(",")) {
            validationFields = validationFields.split(",");
            validationFields.forEach((ele) => {
              const validationItem = ele.split(":");
              const validationItemObj = {};
              validationItemObj["prop"] = validationItem[0];
              validationItemObj["val"] = validationItem[1];
              validationArray.push(validationItemObj);
            });
          } else {
            const validationItem = validationFields.split(":");
            const validationItemObj = {};
            validationItemObj["prop"] = validationItem[0];
            validationItemObj["val"] = validationItem[1];
            validationArray.push(validationItemObj);
          }
          if (labels.includes(",")) {
            labels = labels.split(",");
            labelsArray = labels;
          } else {
            labelsArray.push(labels);
          }

          if (inputType === "radio") {
            let radiodiv = {};
            radiodiv["mainLabel"] = labelsArray[0];
            radiodiv["options"] = labelsArray.slice(1);
            radiodiv["inputValidation"] = validationArray;
            radiodiv["shortHand"] = shorthandFields.split(",");
            const radiob = {};
            radiob["radio"] = radiodiv;
            arr.push(radiob);
          } else if (inputType === "checkbox") {
            let checkboxdiv = {};
            checkboxdiv["mainLabel"] = labelsArray[0];
            checkboxdiv["options"] = labelsArray.slice(1);
            checkboxdiv["inputValidation"] = validationArray;
            checkboxdiv["shortHand"] = shorthandFields.split(",");
            const check = {};
            check["checkbox"] = checkboxdiv;
            console.log("Went Inside Here")
            arr.push(check);
          } else if (inputType == "select") {
            let selectdiv = {};
            selectdiv["mainLabel"] = labelsArray[0];
            selectdiv["options"] = labelsArray.slice(1);
            selectdiv["inputValidation"] = validationArray;
            selectdiv["shortHand"] = shorthandFields.split(",");
            const select = {};
            select["select"] = selectdiv;
            arr.push(select);
          } else if (inputType === "textArea") {
            let field = {};
            field["inputType"] = inputType;
            field["mainLabel"] = labelsArray;
            field["inputValidation"] = validationArray;
            field["shortHand"] = shorthandFields.split(",");
            const objField = {};
            objField["textArea"] = field;
            arr.push(objField);
          } else if (
            inputType === "date" ||
            inputType === "number" ||
            inputType === "email" ||
            inputType === "tel" ||
            inputType === "range" ||
            inputType === "color" ||
            inputType === "file"  ||
            inputType==="datetime-local"||
            inputType==="time"
          || inputType==="text" || inputType==="range"
 
          ) {
            let field = {};
            field["inputType"] = inputType;
            field["mainLabel"] = labelsArray;
            field["inputValidation"] = validationArray;
            field["shortHand"] = shorthandFields.split(",");
            const objField = {};
            objField[inputType] = field;
            arr.push(objField);
          }
          else if (inputType === "button") {
                let buttonDiv = {};
                buttonDiv["mainLabel"] = labelsArray[0]; // Button text
                buttonDiv["inputValidation"] = validationArray; // Validation (if applicable)
                buttonDiv["shortHand"] = shorthandFields.split(","); // Short-hand fields
                const button = {};
                button["button"] = buttonDiv;
                arr.push(button);
          } 
           else {
            obj["inputType"] = inputType;
            obj["mainLabel"] = labelsArray;
            obj["inputvalidation"] = validationArray;
            obj["shortHand"] = shorthandFields.split(",");
            const inp = { input: obj };
            arr.push(inp);
          }
        });
        console.log(arr);
        console.log(getDiv.childElementCount);
        formobj["formFields"] = arr;
        formobj["title"] = document.getElementsByName("topicTitle")[0].value;
        formobj["noOfFields"] = getDivNodes.length+fieldSetArray.length;
        formobj["formType"] = document.getElementsByName("topicTitle")[0].value;
        console.log()
        sendData(formobj)
          .then((data) => console.log(data))
          .then((data) => console.log(data))
          .catch((err) => {
            console.log(err);
          });
      }

      document.addEventListener("DOMContentLoaded", function () {
        const editId = parseInt(window.location.href.slice[-1]);
        if(window.location.href!="http://localhost:4000/forms")
        {
        createUpdate(event)
          .then((data) => console.log("Done"))
          .catch((err) => console.log(err));
        }
        document
          .getElementsByTagName("button")[0]
          .addEventListener("click", createUpdate);
      });
    </script>
  </head>
  <body>
   
   
    <div class="form-container">
      <form action="">
        <div class="maincont mb-3 width:20px">
          <label for="topicTitle" class="form-label">Title</label>
          <input
            type="email"
            class="form-control"
            id="topicTitle"
            name="topicTitle"
            aria-describedby="emailHelp"
          />
        </div>
        <div class="mb-3">
          <label for="numberInput" class="form-label">Enter a number</label>
          <input
            type="number"
            name="numberInput"
            class="form-control"
            id="numberInput"
            placeholder="Enter a number"
            min="1"
            max="100"
            step="1"
          />
        </div>
        <button type="button" class="create btn btn-primary">Create Form</button>
      </form>
    </div>
  </body>
</html>

